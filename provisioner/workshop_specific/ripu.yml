---
- name: configure ripu workshop for webservers
  hosts: lab_hosts
  become: true
  gather_facts: false
  tasks:
    - name: configure RHEL webservers
      include_role:
        name: ../../roles/webservers

- name: Configure controller for ripu
  hosts: control_nodes
  gather_facts: false
  vars:
    ripu_project_scm_url: 'https://github.com/redhat-partner-tech/leapp-project'
    ripu_project_scm_branch: 'main'
    controller_request_timeout: "250"
    controller_configuration_projects_async_retries: 60
    controller_configuration_projects_async_delay: 5
    controller_infra_workloads:
      - infra.controller_configuration.credential_types
      - infra.controller_configuration.execution_environments
      - infra.controller_configuration.projects
      - infra.controller_configuration.project_update
      - infra.controller_configuration.job_templates
    controller_hostname: "https://{{ ansible_host }}"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_validate_certs: false
    controller_credential_types:
      - name: GitHub_Personal_Access_Token
        description: Credential for GitHub repo operations automation
        kind: cloud
        inputs:
          fields:
            - type: string
              id: personal_access_token
              label: Personal Access Token
              secret: true
              help_text: GitHub Personal Access Token
              multiline: true
          required:
            - personal_access_token
        injectors:
          env:
            MY_PA_TOKEN: !unsafe '{{ personal_access_token }}'
    controller_projects:
      - name: Project Leapp
        organization: Default
        scm_update_on_launch: false
        scm_update_cache_timeout: 3600
        scm_type: git
        scm_url: "{{ ripu_project_scm_url }}"
        scm_branch: "{{ ripu_project_scm_branch }}"
        default_environment: ripu workshop execution environment
    controller_templates:
      - name: Z / CaC / Controller
        project: Project Leapp
        playbook: controller_cac.yml
        inventory: Workshop Inventory
        execution_environment: Default execution environment
        credentials:
          - Controller Credential
        extra_vars:
          controller_configuration_projects_async_retries: 60
          controller_configuration_projects_async_delay: 5
    controller_execution_environments:
      - name: ripu workshop execution environment
        image: registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest

  tasks:
    # Allow projects to pull collections via collections/requirements.yml
    - name: Turn on AWX_COLLECTIONS_ENABLED on controller
      awx.awx.settings:
        name: AWX_COLLECTIONS_ENABLED
        value: true
        controller_username: admin
        controller_password: "{{ admin_password }}"
        controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
        validate_certs: false

    - name: Deploy controller-infra workloads
      ansible.builtin.include_tasks: generic_cac_subtasks_init.yml
      loop: "{{ controller_infra_workloads }}"
      loop_control:
        loop_var: controller_infra_vars
      when:
        - controller_infra_workloads | d("") | length >0

- name: Final workshop preparations
  hosts: control_nodes
  become: true
  gather_facts: true
  tasks:
    - name: check for updates
      yum:
        name: '*'
        state: latest
        exclude: kernel*

    - when: provision_mode == "workshop"
      block:
        - name: Run Z / CaC / Controller job template
          awx.awx.job_launch:
            job_template: "Z / CaC / Controller"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: setupcontroljob

        - name: "Check API until Z / CaC / Controller job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ setupcontroljob.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: workshop_job_templates01
          until: workshop_job_templates01.json.status == "successful"
          delay: 15  # Every 15 seconds
          retries: 24  # 6 minutes 6*60/15

        - name: Run Z / SETUP / Workshop deployment workflow template
          awx.awx.workflow_launch:
            workflow_template: "Z / SETUP / Workshop deployment"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
            timeout: 900

    - when: provision_mode == "demo"
      block:
        - name: Run SETUP / Controller job template
          awx.awx.job_launch:
            job_template: "SETUP / Controller"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: setupcontroljob

        - name: "Check API until SETUP / Controller job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ setupcontroljob.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: workshop_job_templates01
          until: workshop_job_templates01.json.status == "successful"
          delay: 15  # Every 15 seconds
          retries: 16  # 4 minutes 4*60/15

        - name: Run Fact Scan job template
          awx.awx.job_launch:
            job_template: "UTILITY / Fact Scan"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: factscanjob

        - name: "Check API until Fact Scan job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ factscanjob.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: workshop_job_templates02
          until: workshop_job_templates02.json.status == "successful"
          delay: 15  # Every 15 seconds
          retries: 20  # 5 minutes 5*60/15
...
