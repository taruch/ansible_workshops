---
- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call qradar retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_qradar.yml

- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call splunk retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_splunk.yml

- set_fact:
    siem_async: "{{ splunk_async }}"
  when: security_console == 'splunk'
- set_fact:
    siem_async: "{{ qradar_async }}"
  when: security_console == 'qradar'

- name: RHEL instance size list length
  ansible.builtin.debug:
    msg: "RHEL instance size list length: {{ ec2_info.rhel8.size | length }}"

- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call snort retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_snort.yml

- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call attack sim retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_attacksim.yml

- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call Check Point CloudGuard Security Management retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_checkpoint_mgmt.yml

- name: Initialize/reset list count
  ansible.builtin.set_fact:
    list_count: "reset"

- name: Call Windows Workstation (SECURITY MODE) retry tasks include
  ansible.builtin.include_tasks: security_ec2_create_loop_windows_ws.yml

###########################################################################
### THIS IS A BIT OF A HACK AND REQUIRES BOOK KEEPING BUT IT'S FAST
#
#   The order in which the _async vars are listed here is the order in
#   which they will be registered in the
#   wait_for_ec2_instance_creation['results'] variable and that is important
#   for the following set_fact that makes that information usable later on
- name: Wait for async instance creation to complete
  async_status:
    jid: "{{ item['ansible_job_id'] }}"
  register: wait_for_ec2_instance_creation
  when: "'ansible_job_id' in item"
  until: wait_for_ec2_instance_creation.finished
  retries: "{{ [async_wait_for_retries | int, 60] | max }}"
  loop:
    - "{{ siem_async }}"
    - "{{ snort_async }}"
    - "{{ attacker_async }}"
    - "{{ checkpoint_mgmt_async }}"
    - "{{ windows_ws_async }}"

# BOOK KEEPING FOR ABOVE async_status
#   NOTE: Order matters here and must match the above task
- set_fact:
    siem_output: "{{ wait_for_ec2_instance_creation['results'][0] }}"
    snort_output: "{{ wait_for_ec2_instance_creation['results'][1] }}"
    attacker_output: "{{ wait_for_ec2_instance_creation['results'][2] }}"
    checkpoint_mgmt_output: "{{ wait_for_ec2_instance_creation['results'][3] }}"
    windows_ws_output: "{{ wait_for_ec2_instance_creation['results'][4] }}"

    ###
    ###########################################################################
...
